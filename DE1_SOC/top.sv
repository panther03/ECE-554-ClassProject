
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module top(


	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		REF_CLK,
	
	//////////// KEYS /////////
	input                      PS2_CLK,
	input                      PS2_DAT,
	
	//////////// SWITCHES /////
	input 						   RST_n,	// this is KEY[0]
	input            [9:0]     SW,
	
	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);

  ////////////////////////////////////
  // internal nets for connections //
  //////////////////////////////////
  wire rst_n;						// synchronized global reset signal
  wire clk;							// 50MHz clock from PLL
  wire pll_locked;					// PLL is locked on reference clock
  wire [9:0] xpix;					// current X coordinate of VGA
  wire [8:0] ypix;					// current Y coordinate of VGA
  wire [18:0] raddr;				// address into videoMem for reads
  wire [8:0] rdata;					// 9-bit color
  wire [18:0] waddr;				// write address to videoMem
  wire [8:0] wdata;					// write data to videoMem
  wire [4:0] image_indx;
  wire [9:0] xloc;
  wire we;
  wire add_img,add_fnt;
  wire [5:0] fnt_indx;
  
  reg [18:0] count;					// generate a pulse on add_img
  
  ////////////////////////////////////////////////////////
  // Instantiate PLL to generate clk and 25MHz VGA_CLK //
  //////////////////////////////////////////////////////
  PLL iPLL(.refclk(REF_CLK), .rst(~RST_n),.outclk_0(clk),.outclk_1(VGA_CLK),
           .locked(pll_locked));
 
  /////////////////////////////////////
  // instantiate rst_n synchronizer //
  ///////////////////////////////////
  rst_synch iRST(.clk(clk),.RST_n_i(RST_n), .PLL_locked_i(pll_locked), .rst_n_o(rst_n));
  
  ///////////////////////////////////////
  // Instantiate VGA Timing Generator //
  /////////////////////////////////////
  VGA_timing iVGATM(.clk25MHz(VGA_CLK), .rst_n(rst_n), .VGA_BLANK_N(VGA_BLANK_N),
                    .VGA_HS(VGA_HS),.VGA_SYNC_N(VGA_SYNC_N), .VGA_VS(VGA_VS), 
					.xpix(xpix), .ypix(ypix), .addr_lead(raddr));
	
  wire [7:0] vga_r_comp;
  wire [7:0] vga_g_comp;
  wire [7:0] vga_b_comp;
  
  wire [7:0] PS2_key;
  wire PS2_rdy;

  VGA_display iVGA(
    .clk(clk),
    .rst_n(rst_n),
	 .xloc(xpix), .yloc(ypix),
    .vga_char_i({8'h0f, PS2_key}), .vga_char_addr_i(12'h000), .vga_char_we_i(PS2_rdy & |PS2_key),
    .graph_px_i(4'h0), .graph_addr_i(19'h00000), .graph_we_i(1'b0),
    .draw_mode_sel_i(SW[0]),
    .VGA_R(vga_r_comp), .VGA_G(vga_g_comp), .VGA_B(vga_b_comp)
  );
  
  PS2_kb iPS2_KB(
    .clk(clk),                   // Will need to be divided to between 10kHz - 16kHz 
    .rst_n(rst_n),
    .PS2_CLK_i(PS2_CLK),             // The PS/2 KB has a clock of its own
    .PS2_DAT_i(PS2_DAT),             // Serial line in from the KB
    .PS2_CHAR_o(PS2_key),  // Last key pressed
    .PS2_rdy_o(PS2_rdy),         // signal that a key code is available 
	 .LED_r_o(LEDR)
  );
					
  /////////////////////////////////////
  // Instantiate 9-bit video memory //
  ///////////////////////////////////
  //videoMem(.clk(clk),.we(we),.waddr(waddr),.wdata(wdata),.raddr(raddr),.rdata(rdata));
  
  assign VGA_R = vga_r_comp;
  assign VGA_G = vga_g_comp;
  assign VGA_B = vga_b_comp;
  
 endmodule
